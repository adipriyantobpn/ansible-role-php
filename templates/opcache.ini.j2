; Enable Zend OPcache extension module
{% if php_opcache_zend_extension is defined %}
zend_extension={{ php_opcache_zend_extension }}
{% else %}
zend_extension=opcache.so
{% endif %}

; Determines if Zend OPCache is enabled
{% if php_opcache_enable is defined %}
opcache.enable={{ php_opcache_enable | int }}
{% else %}
opcache.enable=1
{% endif %}

; Determines if Zend OPCache is enabled for the CLI version of PHP
{% if php_opcache_enable_cli is defined %}
opcache.enable_cli={{ php_opcache_enable_cli | int }}
{% else %}
;opcache.enable_cli=0
{% endif %}

; The OPcache shared memory storage size.
{% if php_opcache_memory_consumption is defined %}
opcache.memory_consumption={{ php_opcache_memory_consumption }}
{% else %}
opcache.memory_consumption=128
{% endif %}

; The amount of memory for interned strings in Mbytes.
{% if php_opcache_interned_strings_buffer is defined %}
opcache.interned_strings_buffer={{ php_opcache_interned_strings_buffer }}
{% else %}
opcache.interned_strings_buffer=8
{% endif %}

; The maximum number of keys (scripts) in the OPcache hash table.
; Only numbers between 200 and 100000 are allowed.
{% if php_opcache_max_accelerated_files is defined %}
opcache.max_accelerated_files={{ php_opcache_max_accelerated_files }}
{% else %}
opcache.max_accelerated_files=4000
{% endif %}

; The maximum percentage of "wasted" memory until a restart is scheduled.
{% if php_opcache_max_wasted_percentage is defined %}
opcache.max_wasted_percentage={{ php_opcache_max_wasted_percentage }}
{% else %}
;opcache.max_wasted_percentage=5
{% endif %}

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
{% if php_opcache_use_cwd is defined %}
opcache.use_cwd={{ php_opcache_use_cwd }}
{% else %}
;opcache.use_cwd=1
{% endif %}

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
{% if php_opcache_validate_timestamps is defined %}
opcache.validate_timestamps={{ php_opcache_validate_timestamps }}
{% else %}
;opcache.validate_timestamps=1
{% endif %}

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only
; once per request. "0" means always validate)
{% if php_opcache_revalidate_freq is defined %}
opcache.revalidate_freq={{ php_opcache_revalidate_freq }}
{% else %}
;opcache.revalidate_freq=2
{% endif %}

; Enables or disables file search in include_path optimization
{% if php_opcache_revalidate_path is defined %}
opcache.revalidate_path={{ php_opcache_revalidate_path }}
{% else %}
;opcache.revalidate_path=0
{% endif %}

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
{% if php_opcache_save_comments is defined %}
opcache.save_comments={{ php_opcache_save_comments }}
{% else %}
;opcache.save_comments=1
{% endif %}

; If enabled, a fast shutdown sequence is used for the accelerated code
{% if php_opcache_fast_shutdown is defined %}
opcache.fast_shutdown={{ php_opcache_fast_shutdown }}
{% else %}
;opcache.fast_shutdown=0
{% endif %}

; Allow file existence override (file_exists, etc.) performance feature.
{% if php_opcache_enable_file_override is defined %}
opcache.enable_file_override={{ php_opcache_enable_file_override }}
{% else %}
;opcache.enable_file_override=0
{% endif %}

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
{% if php_opcache_optimization_level is defined %}
opcache.optimization_level={{ php_opcache_optimization_level }}
{% else %}
;opcache.optimization_level=0xffffffff
{% endif %}

{% if php_opcache_inherited_hack is defined %}
opcache.inherited_hack={{ php_opcache_inherited_hack }}
{% else %}
;opcache.inherited_hack=1
{% endif %}
{% if php_opcache_dups_fix is defined %}
opcache.dups_fix={{ php_opcache_dups_fix }}
{% else %}
;opcache.dups_fix=0
{% endif %}

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated.
{% if php_opcache_blacklist_filename is defined and php_opcache_blacklist_filename != '' %}
opcache.blacklist_filename={{ php_opcache_blacklist_filename }}
{% else %}
opcache.blacklist_filename=/etc/php.d/opcache*.blacklist
{% endif %}

; Allows exclusion of large files from being cached. By default all files
; are cached.
{% if php_opcache_max_file_size is defined %}
opcache.max_file_size={{ php_opcache_max_file_size }}
{% else %}
;opcache.max_file_size=0
{% endif %}

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
{% if php_opcache_consistency_checks is defined %}
opcache.consistency_checks={{ php_opcache_consistency_checks }}
{% else %}
;opcache.consistency_checks=0
{% endif %}

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
{% if php_opcache_force_restart_timeout is defined %}
opcache.force_restart_timeout={{ php_opcache_force_restart_timeout }}
{% else %}
;opcache.force_restart_timeout=180
{% endif %}

; OPcache error_log file name. Empty string assumes "stderr".
{% if php_opcache_error_log is defined %}
opcache.error_log={{ php_opcache_error_log }}
{% else %}
;opcache.error_log=
{% endif %}

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
{% if php_opcache_log_verbosity_level is defined %}
opcache.log_verbosity_level={{ php_opcache_log_verbosity_level }}
{% else %}
;opcache.log_verbosity_level=1
{% endif %}

; Preferred Shared Memory back-end. Leave empty and let the system decide.
{% if php_opcache_preferred_memory_model is defined %}
opcache.preferred_memory_model={{ php_opcache_preferred_memory_model }}
{% else %}
;opcache.preferred_memory_model=
{% endif %}

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
{% if php_opcache_protect_memory is defined %}
opcache.protect_memory={{ php_opcache_protect_memory }}
{% else %}
;opcache.protect_memory=0
{% endif %}

; Allows calling OPcache API functions only from PHP scripts which path is
; started from specified string. The default "" means no restriction
{% if php_opcache_restrict_api is defined %}
opcache.restrict_api={{ php_opcache_restrict_api }}
{% else %}
;opcache.restrict_api=
{% endif %}

; Enables and sets the second level cache directory.
; It should improve performance when SHM memory is full, at server restart or
; SHM reset. The default "" disables file based caching.
; RPM note : file cache directory must be owned by process owner
;   for mod_php, see /etc/httpd/conf.d/php.conf
;   for php-fpm, see /etc/php-fpm.d/*conf
{% if php_opcache_file_cache is defined %}
opcache.file_cache={{ php_opcache_file_cache }}
{% else %}
;opcache.file_cache=
{% endif %}

; Enables or disables opcode caching in shared memory.
{% if php_opcache_file_cache_only is defined %}
opcache.file_cache_only={{ php_opcache_file_cache_only }}
{% else %}
;opcache.file_cache_only=0
{% endif %}

; Enables or disables checksum validation when script loaded from file cache.
{% if php_opcache_file_cache_consistency_checks is defined %}
opcache.file_cache_consistency_checks={{ php_opcache_file_cache_consistency_checks }}
{% else %}
;opcache.file_cache_consistency_checks=1
{% endif %}

; Implies opcache.file_cache_only=1 for a certain process that failed to
; reattach to the shared memory (for Windows only). Explicitly enabled file
; cache is required.
{% if php_opcache_file_cache_fallback is defined %}
opcache.file_cache_fallback={{ php_opcache_file_cache_fallback }}
{% else %}
;opcache.file_cache_fallback=1
{% endif %}

; Validate cached file permissions.
; Leads OPcache to check file readability on each access to cached file.
; This directive should be enabled in shared hosting environment, when few
; users (PHP-FPM pools) reuse the common OPcache shared memory.
{% if php_opcache_validate_permission is defined %}
opcache.validate_permission={{ php_opcache_validate_permission }}
{% else %}
;opcache.validate_permission=0
{% endif %}

; Prevent name collisions in chroot'ed environment.
; This directive prevents file name collisions in different "chroot"
; environments. It should be enabled for sites that may serve requests in
; different "chroot" environments.
{% if php_opcache_validate_root is defined %}
opcache.validate_root={{ php_opcache_validate_root }}
{% else %}
;opcache.validate_root=0
{% endif %}

; Enables or disables copying of PHP code (text segment) into HUGE PAGES.
; This should improve performance, but requires appropriate OS configuration.
{% if php_opcache_huge_code_pages is defined %}
opcache.huge_code_pages={{ php_opcache_huge_code_pages }}
{% else %}
opcache.huge_code_pages=1
{% endif %}
