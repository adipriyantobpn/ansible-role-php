; Enable APCu extension module
extension=apcu.so

;	This can be set to 0 to disable APCu
{% if php_enable_apc is defined %}
apc.enabled={{ php_enable_apc | int }}
{% else %}
apc.enabled=1
{% endif %}

;	Setting this enables APCu for the CLI version of PHP
;	(Mostly for testing and debugging).
{% if php_apc_enable_cli is defined %}
apc.enable_cli={{ php_apc_enable_cli | int }}
{% else %}
;apc.enable_cli=0
{% endif %}

;	Sets the path to text files containing caches to load from disk upon
;	initialization of APCu. preload_path should be a directory where each
;	file follows $key.data where $key should be used as the entry name
;	and the contents of the file contains serialized data to use as the value
;	of the entry.
{% if php_apc_preload_path is defined %}
apc.preload_path={{ php_apc_preload_path }}
{% else %}
;apc.preload_path=
{% endif %}

;	The size of each shared memory segment, with M/G suffixe
{% if php_apc_shm_size is defined %}
apc.shm_size={{ php_apc_shm_size }}
{% else %}
;apc.shm_size=32M
{% endif %}

;	The number of seconds a cache entry is allowed to idle in a slot in case
;	this cache entry slot is needed by another entry.
{% if php_apc_ttl is defined %}
apc.ttl={{ php_apc_ttl }}
{% else %}
;apc.ttl=0
{% endif %}

;	The number of seconds that a cache entry may remain on the
;	garbage-collection list.
{% if php_apc_gc_ttl is defined %}
apc.gc_ttl={{ php_apc_gc_ttl }}
{% else %}
;apc.gc_ttl=3600
{% endif %}

;	If you begin to get low on resources, an expunge of the cache
;	is performed if it is less than half full. This is not always
;	a suitable way of determining if an expunge of the cache
;	should be per apc.smart allows you to set a runtime configuration
;	value which	is used to determine if an expunge should be run
;	if (available_size < apc.smart * requested_size)
{% if php_apc_smart is defined %}
apc.smart={{ php_apc_smart }}
{% else %}
;apc.smart=0
{% endif %}

;	A "hint" about the number variables expected in the cache.
;	Set to zero or omit if you are not sure;
{% if php_apc_entries_hint is defined %}
apc.entries_hint={{ php_apc_entries_hint }}
{% else %}
;apc.entries_hint=4096
{% endif %}

;	The mktemp-style file_mask to pass to the mmap module
{% if php_apc_mmap_file_mask is defined %}
apc.mmap_file_mask={{ php_apc_mmap_file_mask }}
{% else %}
apc.mmap_file_mask=/tmp/apc.XXXXXX
{% endif %}

;	On very busy servers whenever you start the server or
;	modify files you can create a race of many processes
;	all trying to cache the same data at the same time.
;	By default, APCu attempts to prevent "slamming" of a key.
;	A key is considered "slammed" if it was the last key set,
;	and a context other than the current one set it ( ie. it
;	was set by another process or thread )
{% if php_apc_slam_defense is defined %}
apc.slam_defense={{ php_apc_slam_defense }}
{% else %}
;apc.slam_defense=1
{% endif %}

;	Defines which serializer should be used
;	Default is the standard PHP serializer.
{% if php_apc_serializer is defined %}
apc.serializer='{{ php_apc_serializer }}'
{% else %}
;apc.serializer='default'
{% endif %}

;	use the SAPI request start time for TTL
{% if php_apc_use_request_time is defined %}
apc.use_request_time={{ php_apc_use_request_time }}
{% else %}
;apc.use_request_time=1
{% endif %}

;	Enables APCu handling of signals, such as SIGSEGV, that write core files
;	when signaled. APCu will attempt to unmap the shared memory segment in
;	order to exclude it from the core file
{% if php_apc_coredump_unmap is defined %}
apc.coredump_unmap={{ php_apc_coredump_unmap }}
{% else %}
;apc.coredump_unmap=0
{% endif %}

apc.rfc1867=1
